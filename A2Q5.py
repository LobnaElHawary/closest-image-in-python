# -*- coding: utf-8 -*-
"""A2Q5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_eZzNQqlReJIJw4ClyumBR7RASkLXrpT?usp=sharing
"""

import numpy as np 
from pandas import DataFrame

#Set the grey level limits a , b and the grey level range R.
a = 0
b = 31
R = b - a + 1
M = 50 #rows
N = 50 #columns
eps = 0.0000001
H = np.array([])
similarity = np.array([])

#Load the reference image A
with open('images/' + 'IA.txt') as f:
    A = f.readlines()[5:] #skip first 5 lines

#For each image in the database s = 1 to m
filenames = ['IB1.txt','IB2.txt','IB3.txt','IB4.txt','IB5.txt','IB6.txt','IB7.txt','IB8.txt','IB9.txt','IB10.txt']
for item in filenames:
  with open('images/' + item) as f: #Load database image Bs
    B = f.readlines()[4:]
    C = np.full((R, R), eps) #Zero co-occurrence matrix C of size R x R
    for row in range(0, M): 
      for column in range(0, N):
          K = int(A[row].split()[column])
          L = int(B[row].split()[column]) #word in line: row and col word
          C[K][L] = C[K][L] + 1 #increment C (K,L)
    P = C / (M*N) #Compute co-occurrence probability 
    H = np.append(H,-sum(P.flatten() * np.log2(P.flatten()))) #Convert P to 1-D and compute Hs (A , Bs)
for i in range(len(H)): 
  similarity = np.append(similarity,(1 - (H[i]/ max(H))))
#part 1
print("part 1:")
print(item)
print(DataFrame(P))
#part 2
print("part 2:")
print(DataFrame(H))
#part 3
print("part 3:")
print(DataFrame(similarity))
#part 4
print("part 4:")
smax = np.argmax(similarity)
print(smax)
print("So the image similar to IA is IB"+ str(smax+1))